// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: johnjud/backend/adopt/v1/adopt.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdoptService_FindAll_FullMethodName = "/johnjud.backend.adopt.v1.AdoptService/FindAll"
	AdoptService_Create_FullMethodName  = "/johnjud.backend.adopt.v1.AdoptService/Create"
	AdoptService_Delete_FullMethodName  = "/johnjud.backend.adopt.v1.AdoptService/Delete"
)

// AdoptServiceClient is the client API for AdoptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdoptServiceClient interface {
	FindAll(ctx context.Context, in *FindAllAdoptRequest, opts ...grpc.CallOption) (*FindAllAdoptResponse, error)
	Create(ctx context.Context, in *CreateAdoptRequest, opts ...grpc.CallOption) (*CreateAdoptResponse, error)
	Delete(ctx context.Context, in *DeleteAdoptRequest, opts ...grpc.CallOption) (*DeleteAdoptResponse, error)
}

type adoptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdoptServiceClient(cc grpc.ClientConnInterface) AdoptServiceClient {
	return &adoptServiceClient{cc}
}

func (c *adoptServiceClient) FindAll(ctx context.Context, in *FindAllAdoptRequest, opts ...grpc.CallOption) (*FindAllAdoptResponse, error) {
	out := new(FindAllAdoptResponse)
	err := c.cc.Invoke(ctx, AdoptService_FindAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adoptServiceClient) Create(ctx context.Context, in *CreateAdoptRequest, opts ...grpc.CallOption) (*CreateAdoptResponse, error) {
	out := new(CreateAdoptResponse)
	err := c.cc.Invoke(ctx, AdoptService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adoptServiceClient) Delete(ctx context.Context, in *DeleteAdoptRequest, opts ...grpc.CallOption) (*DeleteAdoptResponse, error) {
	out := new(DeleteAdoptResponse)
	err := c.cc.Invoke(ctx, AdoptService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdoptServiceServer is the server API for AdoptService service.
// All implementations must embed UnimplementedAdoptServiceServer
// for forward compatibility
type AdoptServiceServer interface {
	FindAll(context.Context, *FindAllAdoptRequest) (*FindAllAdoptResponse, error)
	Create(context.Context, *CreateAdoptRequest) (*CreateAdoptResponse, error)
	Delete(context.Context, *DeleteAdoptRequest) (*DeleteAdoptResponse, error)
	mustEmbedUnimplementedAdoptServiceServer()
}

// UnimplementedAdoptServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdoptServiceServer struct {
}

func (UnimplementedAdoptServiceServer) FindAll(context.Context, *FindAllAdoptRequest) (*FindAllAdoptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedAdoptServiceServer) Create(context.Context, *CreateAdoptRequest) (*CreateAdoptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAdoptServiceServer) Delete(context.Context, *DeleteAdoptRequest) (*DeleteAdoptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAdoptServiceServer) mustEmbedUnimplementedAdoptServiceServer() {}

// UnsafeAdoptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdoptServiceServer will
// result in compilation errors.
type UnsafeAdoptServiceServer interface {
	mustEmbedUnimplementedAdoptServiceServer()
}

func RegisterAdoptServiceServer(s grpc.ServiceRegistrar, srv AdoptServiceServer) {
	s.RegisterService(&AdoptService_ServiceDesc, srv)
}

func _AdoptService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllAdoptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdoptServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdoptService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdoptServiceServer).FindAll(ctx, req.(*FindAllAdoptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdoptService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdoptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdoptServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdoptService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdoptServiceServer).Create(ctx, req.(*CreateAdoptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdoptService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdoptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdoptServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdoptService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdoptServiceServer).Delete(ctx, req.(*DeleteAdoptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdoptService_ServiceDesc is the grpc.ServiceDesc for AdoptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdoptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "johnjud.backend.adopt.v1.AdoptService",
	HandlerType: (*AdoptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _AdoptService_FindAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AdoptService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AdoptService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "johnjud/backend/adopt/v1/adopt.proto",
}
